name: CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  pre-test:
    name: Pre-Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Pylint
        if: ${{ always() }}
        uses: dciborow/action-pylint@main
        with:
          reporter: github-pr-review
          fail_on_error: true
          glob_pattern: "**/*.py"

      - name: Mypy
        if: ${{ always() }}
        uses: tsuyoshicho/action-mypy@v3
        with:
          reporter: github-pr-review
          fail_on_error: true

      - name: ShellCheck
        if: ${{ always() }}
        uses: reviewdog/action-shellcheck@v1
        with:
          reporter: github-pr-review
          fail_on_error: true

      - name: yamllint
        if: ${{ always() }}
        uses: reviewdog/action-yamllint@v1
        with:
          reporter: github-pr-review
          fail_on_error: true
          yamllint_flags: '--config-file src/tests/extra/yamllint.yml'

  abicheck:
    name: ABI Compliance
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Compare
        env:
          STABLE_REF: 77866a28493dcc40cad651e314853b5fb511edcf
          COMMIT_REF: ${{ github.event.pull_request.head.sha }}
        run: |
          ./src/tests/extra/abicheck.py ${STABLE_REF} ${COMMIT_REF}

  reuse:
    name: REUSE Compliance
    needs: [pre-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint
        uses: fsfe/reuse-action@v1
        with:
          args: lint

  codespell:
    name: Codespell
    needs: [pre-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Spell Check
        uses: codespell-project/actions-codespell@master
        with:
          ignore_words_list: doubleclick,inout,sav
          skip: ./src/tests/data,./subprojects,./*.po

  commitlint:
    name: Commitlint
    needs: [pre-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5

  test:
    name: Tests
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    strategy:
      matrix:
        label:
          - GCC
          - LLVM
          - ASan, UBSan
          - TSan
        include:
          - label: GCC
            cc: gcc
            coverage: true
            sanitize: none
          - label: LLVM
            cc: llvm
            coverage: false
            sanitize: none
          - label: ASan, UBSan
            cc: gcc
            coverage: false
            sanitize: address,undefined
          - label: TSan
            cc: gcc
            coverage: false
            sanitize: thread
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        env:
          CC: ${{ matrix.cc == 'llvm' && 'clang' || 'gcc' }}
          CC_LD: ${{ matrix.cc == 'llvm' && 'lld' || 'gold' }}
          CXX: ${{ matrix.cc == 'llvm' && 'clang++' || 'g++' }}
          CXX_LD: ${{ matrix.cc == 'llvm' && 'lld' || 'gold' }}
          BUILD_COVERAGE: ${{ matrix.coverage }}
          BUILD_SANITIZE: ${{ matrix.sanitize }}
          BUILD_INTROSPECTION: ${{ matrix.sanitize == 'none' }}
        run: |
          meson setup --buildtype=debugoptimized \
                      -Db_coverage=${BUILD_COVERAGE} \
                      -Db_sanitize=${BUILD_SANITIZE} \
                      -Dintrospection=${BUILD_INTROSPECTION} \
                      -Dtests=true \
                      _build
          meson compile -C _build

      - name: Test
        env:
          TEST_REPEAT: ${{ matrix.sanitize == 'none' && 3 || 1 }}
          TEST_TIMEOUT: ${{ matrix.sanitize == 'none' && 1 || 4 }}
        run: |
          dbus-run-session \
          xvfb-run -d \
          meson test -C _build \
                     --print-errorlogs \
                     --repeat=${TEST_REPEAT} \
                     --timeout-multiplier ${TEST_TIMEOUT}

      - name: Test Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Tests (${{ matrix.label }})
          path: _build/meson-logs/testlog.txt

      - name: Coverage
        if: ${{ success() && matrix.coverage }}
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          lcov --directory _build \
               --capture \
               --initial \
               --output-file _build/meson-logs/coverage.p1
          lcov --directory _build \
               --capture \
               --no-checksum \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.p2
          lcov --add-tracefile _build/meson-logs/coverage.p1 \
               --add-tracefile _build/meson-logs/coverage.p2 \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

          lcov --extract _build/meson-logs/coverage.info \
               "${WORKSPACE}/src/*" \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info
          lcov --remove _build/meson-logs/coverage.info \
               '*/src/tests/*' \
               '*/subprojects/*' \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

      - name: Coverage Report
        if: ${{ matrix.coverage }}
        continue-on-error: true
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/_build/meson-logs/coverage.info

  flatpak:
    name: Tests (Flatpak)
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-42
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install D-Bus
        run: |
          dnf install dbus-daemon -y

      - name: Build
        uses: andyholmes/flatpak-github-actions/flatpak-builder@dbus-tests
        with:
          bundle: ca.andyholmes.Valent.Tests.flatpak
          manifest-path: build-aux/flatpak/ca.andyholmes.Valent.Tests.json
          run-tests: true

  smoke:
    name: Smoke Tests (Documentation)
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        run: |
          meson setup --buildtype=release \
                      -Ddocumentation=true \
                      _build
          meson compile -C _build
