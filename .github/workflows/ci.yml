name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Setup Linters
        run: |
          python -m pip install --upgrade pip
          pip install codespell mypy pylint reuse yamllint

      - name: Licensing (reuse)
        if: ${{ always() }}
        run: |
          reuse lint

      - name: Spelling (codespell)
        run: |
          codespell --config src/tests/extra/setup.cfg

      - name: Python (mypy, pylint)
        if: ${{ always() }}
        run: |
          mypy $(git ls-files '*.py')
          pylint --rcfile src/tests/extra/setup.cfg \
                 $(git ls-files '*.py')

      - name: YAML (yamllint)
        if: ${{ always() }}
        run: |
          yamllint --config-file src/tests/extra/yamllint.yml \
                   $(git ls-files '*.yml')

  test:
    name: Unit Tests
    needs: [lint]
    runs-on: ubuntu-latest
    container:
      image: quay.io/andyholmes/valent:latest

    strategy:
      matrix:
        compiler:
          - GCC
          - LLVM
        include:
          - compiler: GCC
            CC: gcc
            CXX: g++
            coverage: true
          - compiler: LLVM
            CC: clang
            CXX: clang++
            coverage: false
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: |
          meson setup --buildtype=debugoptimized \
                      -Db_coverage=true \
                      -Dplugin_bluez=true \
                      -Dtests=true \
                      _build
          meson compile -C _build

      - name: Test
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: |
          dbus-run-session -- \
          xvfb-run -a -s '-screen 0 1024x768x24' \
          meson test -C _build \
                     --print-errorlogs \
                     --repeat=5 \
                     --suite=valent

      - name: Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests (${{ matrix.compiler }})
          path: _build/meson-logs/testlog.txt

      - name: Coverage
        if: ${{ success() && matrix.coverage }}
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          lcov --directory _build \
               --capture \
               --initial \
               --output-file _build/meson-logs/coverage.p1
          lcov --directory _build \
               --capture \
               --no-checksum \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.p2
          lcov --add-tracefile _build/meson-logs/coverage.p1 \
               --add-tracefile _build/meson-logs/coverage.p2 \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

          lcov --extract _build/meson-logs/coverage.info \
               "${WORKSPACE}/src/*" \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info
          lcov --remove _build/meson-logs/coverage.info \
               '*/src/tests/*' \
               '*/subprojects/*' \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

          genhtml --prefix "${WORKSPACE}" \
                  --output-directory _build/meson-logs/coverage-html \
                  --title 'Code Coverage' \
                  --legend \
                  --show-details \
                  --branch-coverage \
                  _build/meson-logs/coverage.info

      - name: Coverage (Report)
        if: ${{ matrix.coverage }}
        continue-on-error: true
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/_build/meson-logs/coverage.info

      - name: Coverage (Deploy)
        if: ${{ github.ref == 'refs/heads/main' && matrix.coverage }}
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages
          commit-message: Coverage Report
          folder: _build/meson-logs/coverage-html
          target-folder: coverage

  sanitizer:
    name: Sanitizer
    needs: [lint]
    runs-on: ubuntu-latest
    container:
      image: quay.io/andyholmes/valent:latest

    strategy:
      matrix:
        sanitizer:
          - ASan, UBSan
          - TSan
        include:
          - sanitizer: ASan, UBSan
            INSTRUMENTATION: address,undefined
          - sanitizer: TSan
            INSTRUMENTATION: thread
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build
        env:
          INSTRUMENTATION: ${{ matrix.INSTRUMENTATION }}
        run: |
          meson setup --buildtype=debugoptimized \
                      -Db_sanitize=${INSTRUMENTATION} \
                      -Dintrospection=false \
                      -Dplugin_bluez=true \
                      -Dtests=true \
                      -Dfuzz_tests=false \
                      _build
          meson compile -C _build

      - name: Test
        run: |
          dbus-run-session -- \
          xvfb-run -a -s '-screen 0 1024x768x24' \
          meson test -C _build \
                     --print-errorlogs \
                     --suite=valent \
                     --timeout-multiplier 2

      - name: Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Sanitizer (${{ matrix.sanitizer }})
          path: _build/meson-logs/testlog.txt

  documentation:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Documentation
    needs: [test, sanitizer]
    runs-on: ubuntu-latest
    container:
      image: quay.io/andyholmes/valent:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build
        run: |
          meson setup --buildtype=release \
                      -Ddocumentation=true \
                      _build
          meson compile -C _build

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages
          commit-message: API Reference
          folder: _build/doc/sdk/valent
          target-folder: documentation

  flatpak:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Flatpak
    needs: [test, sanitizer]
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-41
      options: --privileged

    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Prepare Docker
        if: ${{ matrix.arch == 'aarch64' }}
        run: |
          dnf -y install docker

      - name: Prepare QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Build
        uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v4
        with:
          arch: ${{ matrix.arch }}
          bundle: ca.andyholmes.Valent.flatpak
          manifest-path: build-aux/flatpak/ca.andyholmes.Valent.json
