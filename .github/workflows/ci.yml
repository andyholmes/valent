name: CI

on:
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Setup Linters
        run: |
          python -m pip install --upgrade pip
          pip install codespell mypy pylint reuse yamllint

      - name: Licensing (reuse)
        if: ${{ always() }}
        run: |
          reuse lint

      - name: Spelling (codespell)
        run: |
          codespell --config src/tests/extra/setup.cfg

      - name: Python (mypy, pylint)
        if: ${{ always() }}
        run: |
          mypy $(git ls-files '*.py')
          pylint --rcfile src/tests/extra/setup.cfg \
                 $(git ls-files '*.py')

      - name: YAML (yamllint)
        if: ${{ always() }}
        run: |
          yamllint --config-file src/tests/extra/yamllint.yml \
                   $(git ls-files '*.yml')

  abicheck:
    name: ABI Compliance
    needs: [lint]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Compare
        env:
          STABLE_REF: d5d08260691aa27d1e7e0c80d7b4e0a42ff96d02
          COMMIT_REF: ${{ github.event.pull_request.head.sha }}
        run: |
          ./src/tests/extra/abicheck.py ${STABLE_REF} ${COMMIT_REF}

  test:
    name: Unit Tests
    needs: [lint]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    strategy:
      matrix:
        compiler:
          - GCC
          - LLVM
        include:
          - compiler: GCC
            CC: gcc
            CC_LD: gold
            CXX: g++
            CXX_LD: gold
            coverage: true
          - compiler: LLVM
            CC: clang
            CC_LD: lld
            CXX: clang++
            CXX_LD: lld
            coverage: false
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        env:
          CC: ${{ matrix.CC }}
          CC_LD: ${{ matrix.CC_LD }}
          CXX: ${{ matrix.CXX }}
          CXX_LD: ${{ matrix.CXX_LD }}
          COVERAGE: ${{ matrix.coverage }}
        run: |
          meson setup --buildtype=debugoptimized \
                      -Db_coverage=${COVERAGE} \
                      -Dplugin_bluez=true \
                      -Dtests=true \
                      _build
          meson compile -C _build

      - name: Test
        env:
          CC: ${{ matrix.CC }}
          CXX: ${{ matrix.CXX }}
        run: |
          dbus-run-session -- \
          xvfb-run -a -s '-screen 0 1024x768x24' \
          meson test -C _build \
                     --print-errorlogs \
                     --repeat=3 \
                     --suite=valent

      - name: Test Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests (${{ matrix.compiler }})
          path: _build/meson-logs/testlog.txt

      - name: Coverage
        if: ${{ success() && matrix.coverage }}
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          lcov --directory _build \
               --capture \
               --initial \
               --output-file _build/meson-logs/coverage.p1
          lcov --directory _build \
               --capture \
               --no-checksum \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.p2
          lcov --add-tracefile _build/meson-logs/coverage.p1 \
               --add-tracefile _build/meson-logs/coverage.p2 \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

          lcov --extract _build/meson-logs/coverage.info \
               "${WORKSPACE}/src/*" \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info
          lcov --remove _build/meson-logs/coverage.info \
               '*/src/tests/*' \
               '*/subprojects/*' \
               --rc lcov_branch_coverage=1 \
               --output-file _build/meson-logs/coverage.info

          genhtml --prefix "${WORKSPACE}" \
                  --output-directory _build/meson-logs/coverage-html \
                  --title 'Code Coverage' \
                  --legend \
                  --show-details \
                  --branch-coverage \
                  _build/meson-logs/coverage.info

      - name: Coverage Report
        if: ${{ matrix.coverage }}
        continue-on-error: true
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/_build/meson-logs/coverage.info

  sanitizer:
    name: Sanitizer
    needs: [lint]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/valent:latest

    strategy:
      matrix:
        sanitizer:
          - ASan, UBSan
          - TSan
        include:
          - sanitizer: ASan, UBSan
            INSTRUMENTATION: address,undefined
          - sanitizer: TSan
            INSTRUMENTATION: thread
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        env:
          INSTRUMENTATION: ${{ matrix.INSTRUMENTATION }}
        run: |
          meson setup --buildtype=debugoptimized \
                      -Db_sanitize=${INSTRUMENTATION} \
                      -Dintrospection=false \
                      -Dplugin_bluez=true \
                      -Dtests=true \
                      -Dfuzz_tests=false \
                      _build
          meson compile -C _build

      - name: Test
        run: |
          dbus-run-session -- \
          xvfb-run -a -s '-screen 0 1024x768x24' \
          meson test -C _build \
                     --print-errorlogs \
                     --suite=valent \
                     --timeout-multiplier 2

      - name: Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Sanitizer (${{ matrix.sanitizer }})
          path: _build/meson-logs/testlog.txt
