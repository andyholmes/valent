name: CI

on:
  pull_request:

permissions:
  contents: read

jobs:
  codespell:
    name: Codespell
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Spell Check
        uses: codespell-project/actions-codespell@master
        with:
          ignore_words_list: doubleclick,inout,onlyonce,sav
          skip: ./tests/data,./subprojects,./*.po

  commitlint:
    name: Commitlint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint
        uses: wagoid/commitlint-github-action@v5

  reuse:
    name: REUSE Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint
        uses: fsfe/reuse-action@v1
        with:
          args: lint

  pre-test:
    name: Pre-Tests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false

      - name: Pylint
        if: ${{ always() }}
        uses: dciborow/action-pylint@main
        with:
          reporter: github-pr-review
          fail_on_error: true
          glob_pattern: "**/*.py"

      - name: Mypy
        if: ${{ always() }}
        uses: tsuyoshicho/action-mypy@v3
        with:
          reporter: github-pr-review
          fail_on_error: true

      - name: ShellCheck
        if: ${{ always() }}
        uses: reviewdog/action-shellcheck@v1
        with:
          reporter: github-pr-review
          fail_on_error: true

  build:
    name: Build (Documentation)
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:${{ github.base_ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        run: |
          meson setup --buildtype=release \
                      -Ddocumentation=true \
                      _build
          meson compile -C _build

      - name: Upload
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Documentation
          path: _build/doc/sdk/valent

  analyze:
    name: Static Analysis
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:${{ github.base_ref }}

    strategy:
      matrix:
        profile:
          - abidiff
          - cppcheck
          - gcc
          - llvm
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Analyze
        env:
          CX_PROFILE: ${{ matrix.profile }}
          CX_SETUP_OPTIONS: '-Dintrospection=false -Dtests=true'
          CX_CPPCHECK_LIBRARY: ${{ github.workspace }}/tests/extra/cppcheck.cfg
          CX_CPPCHECK_SUPPRESSIONS: ${{ github.workspace }}/tests/extra/cppcheck.supp
          CX_CPPCHECK_OPTIONS: -I${{ github.workspace}}/tests/fixtures
        run: |
          ./tests/extra/ci-runner.sh analyze

      - name: Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Static Analysis (${{ matrix.profile }})
          path: _build/meson-logs

  test:
    name: Tests
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}:${{ github.base_ref }}

    strategy:
      matrix:
        compiler: [gcc, llvm]
        profile: [default, asan, tsan]
        include:
          - profile: default
            options: '-Dtests=true'
          - profile: asan
            options: '-Dintrospection=false -Dtests=true'
          - profile: tsan
            options: '-Dintrospection=false -Dtests=true'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Test
        env:
          CX_COMPILER: ${{ matrix.compiler }}
          CX_PROFILE: ${{ matrix.profile }}
          CX_SETUP_OPTIONS: ${{ matrix.options }}
          CX_SETUP_COVERAGE: ${{ matrix.compiler == 'gcc' && matrix.profile == 'default' }}
          CX_TEST_REPEAT: 3
          CX_LCOV_INCLUDE_PATH: '${{ github.workspace }}/src/*'
          CX_LCOV_EXCLUDE_PATH: '*/tests/* */subprojects/*'
        run: |
          ./tests/extra/ci-runner.sh test

      - name: Test Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Tests (${{ matrix.profile }})
          path: _build/meson-logs/testlog.txt

      - name: Coverage (coveralls.io)
        if: ${{ matrix.compiler == 'gcc' && matrix.profile == 'default' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ github.workspace }}/_build/meson-logs/coverage.info

  flatpak:
    name: Tests (Flatpak)
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/flatpak-github-actions:gnome-43
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        uses: andyholmes/flatpak-github-actions/flatpak-builder@valent
        with:
          bundle: ca.andyholmes.Valent.flatpak
          manifest-path: build-aux/flatpak/ca.andyholmes.Valent.Tests.json
          run-tests: true

  flatpak-unstable:
    name: Tests (Flatpak Unstable)
    needs: [pre-test]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/andyholmes/flatpak-github-actions:gnome-nightly
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build
        uses: andyholmes/flatpak-github-actions/flatpak-builder@valent
        with:
          bundle: ca.andyholmes.Valent.Devel.flatpak
          manifest-path: build-aux/flatpak/ca.andyholmes.Valent.Devel.Tests.json
          run-tests: true
