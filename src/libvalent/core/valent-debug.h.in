// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-FileCopyrightText: 2015 Christian Hergert <christian@hergert.me>
// SPDX-FileCopyrightText: 2021 Andy Holmes <andrew.g.r.holmes@gmail.com>

#pragma once

#include <glib.h>

G_BEGIN_DECLS

/**
 * SECTION:valentdebug
 * @title: Debug logging and tracing
 * @short_description: tracing and debug facilities
 *
 * The profiling macros %VALENT_ENTRY, %VALENT_EXIT, %VALENT_RETURN,
 * %VALENT_GOTO and %VALENT_PROBE provide helpers for tracing at runtime.
 *
 * The debugging macros %VALENT_DEBUG, %VALENT_DEBUG_PKT and %VALENT_TODO
 * provide helpers for development (in contrast to standard debug macros).
 *
 * These macros will compile out when configured for a release build.
 */

/**
 * VALENT_LOG_LEVEL_TRACE: (skip)
 */
#ifndef VALENT_LOG_LEVEL_TRACE
# define VALENT_LOG_LEVEL_TRACE ((GLogLevelFlags)(1 << G_LOG_LEVEL_USER_SHIFT))
#endif


/*
 * Profiling Macros
 */
#ifndef VALENT_ENABLE_PROFILING
# define VALENT_ENABLE_PROFILING @VALENT_ENABLE_PROFILING@
#endif
#if VALENT_ENABLE_PROFILING != 1
# undef VALENT_ENABLE_PROFILING
#endif


#ifdef VALENT_ENABLE_PROFILING

extern
void valent_trace_mark (const char *strfunc,
                        gint64      begin_time_usec,
                        gint64      end_time_usec);

/**
 * VALENT_ENTRY: (skip)
 *
 * Traces the entry into a function. Place this at the beginning of your
 * function above pre-condition checks.
 */
# define VALENT_ENTRY                                                       \
   gint64 __trace_begin_time = g_get_monotonic_time ();                     \
   g_log(G_LOG_DOMAIN, VALENT_LOG_LEVEL_TRACE, "ENTRY: %s():%d",            \
         G_STRFUNC, __LINE__)

/**
 * VALENT_EXIT: (skip)
 *
 * Traces the exit from a function. Use this instead of "return" to return
 * and log the function exiting.
 */
# define VALENT_EXIT                                                        \
   G_STMT_START {                                                           \
      valent_trace_mark (G_STRFUNC,                                         \
                         __trace_begin_time,                                \
                         g_get_monotonic_time ());                          \
      g_log(G_LOG_DOMAIN, VALENT_LOG_LEVEL_TRACE, " EXIT: %s():%d",         \
            G_STRFUNC, __LINE__);                                           \
      return;                                                               \
   } G_STMT_END

/**
 * VALENT_RETURN: (skip)
 *
 * Similar to %VALENT_EXIT but allows providing a return value.
 */
# define VALENT_RETURN(_r)                                                  \
   G_STMT_START {                                                           \
      valent_trace_mark (G_STRFUNC,                                         \
                         __trace_begin_time,                                \
                         g_get_monotonic_time ());                          \
      g_log(G_LOG_DOMAIN, VALENT_LOG_LEVEL_TRACE, " EXIT: %s():%d ",        \
            G_STRFUNC, __LINE__);                                           \
      return _r;                                                            \
   } G_STMT_END

/**
 * VALENT_GOTO: (skip)
 * @_l: the label to jump to
 *
 * Appends to the jump to label to the tracing log and then jumps
 * to the label @_l.
 */
# define VALENT_GOTO(_l)                                                    \
   G_STMT_START {                                                           \
      g_log(G_LOG_DOMAIN, VALENT_LOG_LEVEL_TRACE, " GOTO: %s():%d ("#_l")", \
            G_STRFUNC, __LINE__);                                           \
      goto _l;                                                              \
   } G_STMT_END

/**
 * VALENT_PROBE: (skip)
 *
 * Appends to the tracing log that a line of code was reached.
 */
# define VALENT_PROBE                                                       \
   g_log(G_LOG_DOMAIN, VALENT_LOG_LEVEL_TRACE, "PROBE: %s():%d",            \
         G_STRFUNC, __LINE__)
#else
# define VALENT_ENTRY               G_STMT_START {            } G_STMT_END
# define VALENT_EXIT                G_STMT_START { return;    } G_STMT_END
# define VALENT_RETURN(_r)          G_STMT_START { return _r; } G_STMT_END
# define VALENT_GOTO(_l)            G_STMT_START { goto _l;   } G_STMT_END
# define VALENT_PROBE               G_STMT_START {            } G_STMT_END
#endif


/*
 * Debug Macros
 */
#ifndef VALENT_ENABLE_DEBUG
# define VALENT_ENABLE_DEBUG @VALENT_ENABLE_DEBUG@
#endif
#if VALENT_ENABLE_DEBUG != 1
# undef VALENT_ENABLE_DEBUG
#endif


#ifdef VALENT_ENABLE_DEBUG

/**
 * VALENT_DEBUG: (skip)
 *
 * Similar to %VALENT_PROBE but allows specifying a log message.
 */
# define VALENT_DEBUG(fmt, ...)                                             \
   g_log(G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "  MSG: %s():%d: " fmt,           \
         G_STRFUNC, __LINE__, ##__VA_ARGS__)

/**
 * VALENT_DEBUG_PKT: (skip)
 * @_pkt: a #JsonNode
 * @_ctx: context for the packet
 *
 * Appends a #JsonNode in string form to the log.
 */
# define VALENT_DEBUG_PKT(_pkt, _ctx)                                       \
   G_STMT_START {                                                           \
     char *__debug_pkt = json_to_string (_pkt, TRUE);                       \
     g_log(G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, "  PKT: %s():%d %s: %s",        \
           G_STRFUNC, __LINE__, _ctx, __debug_pkt);                         \
     g_free(__debug_pkt);                                                   \
   } G_STMT_END

/**
 * VALENT_FIXME: (skip)
 * @_msg: the message to append to the log.
 *
 * Appends to the log that unstable code has been reached.
 */
# define VALENT_FIXME(_msg)                                                 \
   g_log(G_LOG_DOMAIN, G_LOG_LEVEL_INFO, "FIXME: %s():%d: %s",              \
         G_STRFUNC, __LINE__, _msg)

/**
 * VALENT_TODO: (skip)
 * @_msg: the message to append to the log.
 *
 * Appends to the log that unsupported code has been reached.
 */
# define VALENT_TODO(_msg)                                                  \
   g_log(G_LOG_DOMAIN, G_LOG_LEVEL_INFO, " TODO: %s():%d: %s",              \
         G_STRFUNC, __LINE__, _msg)
#else
# define VALENT_DEBUG(fmt, ...)        G_STMT_START {          } G_STMT_END
# define VALENT_DEBUG_PKT(_pkt, _ctx)  G_STMT_START {          } G_STMT_END
# define VALENT_FIXME(_msg)            G_STMT_START {          } G_STMT_END
# define VALENT_TODO(_msg)             G_STMT_START {          } G_STMT_END
#endif

G_END_DECLS

